ðŸŒ¸ Day 1: Arrays â€“ Traversals, Basics

Find the maximum element in an array.


Find the minimum element in an array.


Calculate the sum and average of all elements.


Reverse the array (print or store in reverse).


Check if the array is sorted (in ascending order).


Find the second largest element.


Copy elements of one array into another.


Count the number of even and odd elements in an array.


Find the frequency of each element in an array.





Q12   find the peak elemnt ----->


// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        
        int [] arr= {1,2,3,4,5,78,3,5,23,1,78,90};
        
        //find peek elements
        int low=0; int high=arr.length-1;
        
        while(low <= high){
            
            int mid =low +(high-low)/2;
            
            if((mid==0 || arr[mid] > arr[mid-1]) && (mid==arr.length-1 || arr [mid] >= arr[mid +1])){
                 System.out.println("Peak element: " + arr[mid]);
                return;  // Peak found, exit
            }
            
            if(mid < arr.length-1  && arr[mid ]< arr[mid+1]){
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        
        
    }
}


Find the largest and smallest element in a single traversal.


ðŸŒ¸ Day 2: Arrays â€“ Sorting, Searching

1.Sort the array using Bubble Sort.


2.Sort the array using Selection Sort.


3.Sort the array using Insertion Sort.


4.Implement Binary Search (array must be sorted first).


5.Implement Linear Search (no need for sorted array).


6.Find the first occurrence of an element.


7.Find the last occurrence of an element.


8.Count the number of occurrences of an element.


9.Check if two arrays are equal (after sorting).


10.Merge two sorted arrays into a single sorted array.


ðŸŒ¸ Day 3: Arrays â€“ Kadaneâ€™s Algorithm, Prefix Sum

1.Find the maximum subarray sum using Kadaneâ€™s Algorithm.


2.Find the maximum sum subarray of size k.


3.Find the prefix sum array for a given array.


4.Given a prefix sum array, find the sum of elements between two given indices.


5.Find the equilibrium index (index where sum of left = sum of right).


6.Find the number of subarrays with a given sum (using prefix sums).


7.Find the longest subarray with sum = 0 (important!).


8.Subarray sum divisible by k.


9.Minimum length subarray with sum â‰¥ given value.


10.Maximum length subarray with equal number of 0s and 1s (in a binary array).



11.Roated metrix at 90 degree

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        
        int [][] arr={{1,2,3},{4,5,6},{6,7,8}};
        
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
              System.out.print(arr[i][j] +" ");
            }
             System.out.println();
        }
        
            System.out.println();
        //rotated 90 
        for(int i=0;i<arr.length;i++){
            for(int j=i;j<arr.length;j++){
                
                int  temp= arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        }
        
             for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
              System.out.print(arr[i][j] +" ");
            }
             System.out.println();
        }
        
        
        
        // reverse each row
        
        for(int i=0;i<arr.length;i++){
            
            int left=0; int right=arr[i].length-1;
            
            while(left<right){
                
                int temp =arr[i][left];
                arr[i][left]=arr[i][right];
                arr[i][right]=temp;
                
                left++;
                right--;
            }
        }
             System.out.println();
        
           for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
              System.out.print(arr[i][j] +" ");
            }
             System.out.println();
        }
        
    }
}
