Day 15: Map â€“ Frequency, First Unique

1.Count the frequency of each element using a HashMap.


2.Find the first unique element in an array.


3.Implement group anagrams using a HashMap.


4.Find the longest substring without repeating characters.


5.Find the intersection of two arrays using a HashMap.


--------------------------------------------------------------------------------------------------------

Day 16: Map â€“ Group Anagrams

Q1. Group anagrams from a list of strings.

import java.util.*;

class Main {
    public static void main(String[] args) {
        String[] strs = {"hello", "eat", "ate", "troll", "lorlt"};

        // Map to group anagrams
        HashMap<String, List<String>> map = new HashMap<>();

        for (String s : strs) {
            // Convert string to char array, sort it, and turn back into string
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            String sorted = new String(chars);

            // Add to map
            if (!map.containsKey(sorted)) {
                map.put(sorted, new ArrayList<>());
            }
            map.get(sorted).add(s);
        }

        // Print grouped anagrams
        for (List<String> group : map.values()) {
            System.out.println(group);
        }
    }
}


------------------------------------------------------------------------------------------------------------
Q2. Find the top k frequent elements using a HashMap.

Ans->

import java.util.*;

class Main {
    public static void main(String[] args) {
        int k = 2;
        String s = "hello world";
        
        HashMap<Character, Integer> map = new HashMap<>();
        
        // Count frequency of each character (excluding spaces)
        for (char c : s.toCharArray()) {
            if (c != ' ') {
                map.put(c, map.getOrDefault(c, 0) + 1);
            }
        }

        // Min-heap to keep top k frequent characters
        PriorityQueue<Map.Entry<Character, Integer>> pq =
            new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));
        
        // Maintain top k elements in priority queue
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pq.offer(entry);
            if (pq.size() > k) {
                pq.poll();
            }
        }

        // Extract result from priority queue
        List<Character> result = new ArrayList<>();
        while (!pq.isEmpty()) {
            result.add(pq.poll().getKey());
        }

        // Reverse to get highest frequency first
        Collections.reverse(result);
        System.out.println("Top " + k + " frequent characters: " + result);
    }
}

-------------------------------------------------------------------------------------------------------



Implement least frequently used (LFU) cache.


Check if two arrays are equal using a HashMap.


Find the subarray with the most distinct elements.


Day 17: TreeMap â€“ Custom Sorting

Use TreeMap to store key-value pairs and custom sort them.


Implement a priority queue using a TreeMap.


Perform range queries on a TreeMap.


Find the smallest key greater than a given number in a TreeMap.


Write a program to sort an array using a TreeMap.


--------------------------------------------------------------------------------------------------------------------------------

âœ… HashMap + Stream-Based Java Questions


ðŸ”¹ Functional Programming / Stream API with HashMap


1.How to iterate over a HashMap using Java 8 Streams?

2.How to sort a HashMap by values using Streams?

code ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import java.util.*;
import java.util.stream.*;

class Main {
    public static void main(String[] args) {
        // Original HashMap
        HashMap<Character, Integer> map = new HashMap<>();
        map.put('A', 10);
        map.put('B', 20);
        map.put('c', 20);

        // Sort by value and collect to LinkedHashMap
        Map<Character, Integer> sortedMap = map.entrySet()
            .stream()
            .sorted(Map.Entry.comparingByValue()) // Correct method
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                Map.Entry::getValue,
                (oldValue, newValue) -> oldValue, // merge function
                LinkedHashMap::new // preserve order
            ));

        System.out.println("Sorted Map: " + sortedMap);
    }
}


'''
------------------------------------for reverse order------------------------

.sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed())


'''

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3.How to count frequency of characters/words in a string using Collectors.toMap() and Collectors.groupingBy()?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

class Main {
    public static void main(String[] args) {
        String str = "this is a sentense count a word first and then find the charchter";

        // Count character frequencies (excluding spaces)
        Map<Character, Long> m = str.replaceAll("\\s+", "").chars()
            .mapToObj(c -> (char) c)
            .collect(Collectors.groupingBy(
                Function.identity(),
                Collectors.counting()
            ));

        System.out.println("Character Frequency: " + m);

        // Sort them by frequency (ascending order)
        Map<Character, Long> sortMap = m.entrySet().stream()
            .sorted(Map.Entry.comparingByValue())
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                Map.Entry::getValue,
                (e1, e2) -> e1,            // merge function
                LinkedHashMap::new         // maintain insertion order
            ));

        System.out.println("Sorted by Frequency: " + sortMap);
    }
}

----------------------------------------------------------------------

4.How to filter a Map by values or keys using Stream API?

5.How to convert a List to a Map using Java Streams?

-----------------Example: List<Employee> â†’ Map<Id, Employee>=-----------------------------------

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class Main {
    public static void main(String[] args) {

        List<Employee> employees = Arrays.asList(
            new Employee(101, "Alice"),
            new Employee(102, "Bob"),
            new Employee(103, "Charlie")
        );

        // Convert List<Employee> to Map<Id, Employee>
        Map<Integer, Employee> employeeMap = employees.stream()
            .collect(Collectors.toMap(
                Employee::getId,     // key = employee ID
                Function.identity()  // value = Employee object itself
            ));

        System.out.println("Employee Map: " + employeeMap);
    }
}

---------------------------------------------------------------------------------------------------


7.How to merge two maps using Java 8+?

8.How to find the max/min value in a HashMap using Streams?

9.How to remove null values from a Map using Stream API?

10.How to group a list of objects by a field using Collectors.groupingBy()?

Example: Group employees by department

11.How to convert Map<Key, List<Value>> to Map<Key, Value> by reducing the list using Streams?


--------------------------------------------------------------------------------------------------------------------------------
âœ… SQL-Based Java Coding â€“ Nth Highest Salary Style


(These are typically modeled in either SQL or Java Streams using collections.)

ðŸ”¹ Java-Based Solutions (without SQL)
1.Given a list of employee salaries, find the 2nd/3rd/Nth highest salary.

2.Solution: Use TreeSet, PriorityQueue, or distinct().sorted().skip(n-1).findFirst() in Streams.

3.Find all employees with the highest salary in each department.

4.Group by department, then use Collectors.maxBy().

5.Find duplicate elements in a list using HashMap.

6.Find the top K frequent elements in a list using HashMap + PriorityQueue.

7.Find the employee with the longest name using Stream.

8.Group employees by age and count how many in each group.

9.From a list of transactions, find the highest transaction amount per user.

10.Find if any employee names are anagrams of each other using Map of sorted strings.




âœ… Combined Stream + HashMap Challenges


How to find the most frequent word in a sentence using Stream and HashMap?

How to find employees whose salary is greater than the average salary using Streams?

Convert a Map<String, List<Employee>> into a flat list of Employees using Stream API.

Given a list of numbers, return a frequency map using Streams.

Given a list of Employee{name, salary, dept} â€” group by dept, and for each dept, find top 2 highest-paid employees.

Would you like code solutions for:

Nth highest salary using Streams?

Sorting HashMap by value using Streams?

Grouping and finding max in Map using Collectors.groupingBy()?

Let me know which type of questions or topics you'd like to focus more on.







String string map find higest price nth 

Letâ€™s break it down with an example and complete code.

âœ… Input Example
java
Copy code
Map<String, String> productMap = new HashMap<>();
productMap.put("Phone", "16000.0");
productMap.put("Tablet", "6000.0");
productMap.put("Laptop", "150000.0");
productMap.put("Headphones", "3000.0");
productMap.put("Camera", "50000.0");
âœ… Java Code: Find Nth Highest Price
java
Copy code
import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        Map<String, String> productMap = new HashMap<>();
        productMap.put("Phone", "16000.0");
        productMap.put("Tablet", "6000.0");
        productMap.put("Laptop", "150000.0");
        productMap.put("Headphones", "3000.0");
        productMap.put("Camera", "50000.0");

        int n = 2; // Change this to get Nth highest price

        Optional<Double> nthHighest = productMap.values().stream()
                .map(Double::parseDouble)
                .distinct()
                .sorted(Comparator.reverseOrder())
                .skip(n - 1)
                .findFirst();

        if (nthHighest.isPresent()) {
            double price = nthHighest.get();
            System.out.println(n + "th highest price: " + price);

            // Also print product(s) with this price
            List<String> products = productMap.entrySet().stream()
                    .filter(entry -> Double.parseDouble(entry.getValue()) == price)
                    .map(Map.Entry::getKey)
                    .collect(Collectors.toList());

            System.out.println("Product(s) with " + n + "th highest price: " + products);
        } else {
            System.out.println("Not enough unique prices to find " + n + "th highest.");
        }
    }
}
âœ… Output (when n = 2)
yaml
Copy code
2th highest price: 50000.0
Product(s) with 2th highest price: [Camera]
âœ… Notes:
Prices are in String, so we convert them to Double.

Used .distinct() to avoid duplicate prices.

You can change n = 1 
